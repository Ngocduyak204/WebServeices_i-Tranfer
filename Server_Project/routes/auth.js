const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const otpUtil = require("../utils/otp"); 
const authMiddleware = require("../middleware/authMiddleware"); // Gi·∫£ s·ª≠ b·∫°n ƒë√£ t·∫°o middleware n√†y
const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key"; 
const otpStore={};

// ƒêƒÉng k√Ω
router.post("/register", async (req, res) => {
    console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend:", req.body); // <== Th√™m d√≤ng n√†y
    const { username, email, password, phone, publicKey } = req.body;

  // Ki·ªÉm tra thi·∫øu field
  if (!username || !email || !password || !phone || !publicKey) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  try {
    // Ki·ªÉm tra tr√πng username, email, ho·∫∑c phone
    const existingUser = await User.findOne({ 
      $or: [ { username }, { email }, { phone } ]
    });

    if (existingUser) {
      return res.status(400).json({ message: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i" });
    }

    const hash = await bcrypt.hash(password, 10);
    await User.create({ username, email, password: hash, phone, publicKey });

    res.status(200).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói server" });
  }
});


// ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
    console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend:", req.body); // <== Th√™m d√≤ng n√†y
  const { username, password } = req.body;
  const user = await User.findOne({ username });

  if (!user) {
    return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
  }

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return res.status(400).json({ error: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
  }

  // T·∫°o v√† log OTP l√™n console
  const otp = otpUtil.generateOTP(user.email || user.phone);
  otpStore[user.username] = otp; // L∆∞u OTP v√†o b·ªô nh·ªõ t·∫°m
  console.log(`OTP cho ${user.email || user.phone}: ${otp}`);

  return res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng. ƒê√£ t·∫°o OTP.", email: user.email });
});

router.post("/verify-otp", async(req, res) => {
  const { username, otp } = req.body;

  if (!otp || !username) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin" });
  }

  const savedOtp = otpStore[username];
  if (otp === savedOtp) {
    // X√°c minh th√†nh c√¥ng
    delete otpStore[username]; // X√≥a sau khi d√πng

    const user = await User.findOne({ username });
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: "1h" });

    return res.status(200).json({ message: "OTP h·ª£p l·ªá", token });
  } else {
    return res.status(400).json({ message: "M√£ OTP kh√¥ng ƒë√∫ng" });
  }
});

router.post("/send", authMiddleware, (req, res) => {
  const { message } = req.body;
  console.log("üì© D·ªØ li·ªáu t·ª´ frontend g·ª≠i l√™n:", message);

  res.status(200).json({ message: "ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ frontend", received: message });
});


// --- Qu√™n m·∫≠t kh·∫©u ---
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email." });
  }

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i." });

    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: "15m" });
    const resetLink = `http://localhost:5000/page/reset-password.html?token=${token}`;

    // Th·ª±c t·∫ø: g·ª≠i email b·∫±ng nodemailer
    console.log(`Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho ${email}: ${resetLink}`);

    res.status(200).json({ message: "ƒê√£ t·∫°o link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
  } catch (error) {
    console.error("L·ªói forgot-password:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu." });
  }
});

// --- ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u ---
router.post("/reset-password", async (req, res) => {
  const { token, newPassword } = req.body;

  if (!token || !newPassword) {
    return res.status(400).json({ message: "Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi." });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await User.findById(decoded.userId);
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng." });
  } catch (error) {
    console.error("L·ªói reset-password:", error);
    if (error.name === "TokenExpiredError") {
      return res.status(400).json({ message: "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ h·∫øt h·∫°n." });
    }
    res.status(500).json({ message: "Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
  }
});

module.exports = router;
